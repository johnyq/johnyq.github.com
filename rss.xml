<?xml version="1.0"?>
<rss version="2.0">  <channel>
    <title>Johnyq 烂笔头</title>
    <link>http://johnyq.github.com</link>
    <pubDate>24 Jul 14 15:53 CST</pubDate>
    <item>
      <title>企讯通短信发送折腾记录</title>
      <link>http://johnyq.github.com/2014/sms-empp-send-speed.html</link>
      <pubDate>2014-07-22 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&amp;emsp;&amp;emsp;最近一个业务需要发送短信，客户选择了移动的企讯通（EMPP）。这货其实本质上就是CMPP3.0，然后移动又对他进行了包装，最大的特点就是三家通吃，即移动、联通、电信三家都可以进行短信的发送。呵呵，是不是听起来很美好，以后发短信只要用这货就好了，再也不用弄三家的通道各走各的了。&lt;br /&gt;&#xA;but，只有移动的上下行、状态报告都可以收发，其余两家只能呵呵了。&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;h4&gt;问题&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;&amp;emsp;&amp;emsp;11年的时候曾经接触过，那时候的需求是针对单用户的单发，对发送速度上并没有要求，这次是要求群发，发送的用户大约在5000左右，用户要求在10分钟内到达用户手机。我估摸着计算了一下，按照用户通道20条/s，那么一分钟就是20*60=1200，那么5000条只需要5分钟就差不多提交到网关，算上到达用户手机的时间，10分钟绰绰有余了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&amp;emsp;&amp;emsp;于是代码copy到工程里，测试了两条短信后（客户掏钱没敢多试），在系统功能测试完毕后就上线了。用户第一次正式发送就出现了问题，我们发现3000多条短信发了将近一个多小时，几乎是每秒钟才能发一条，这不是TM开玩笑么。我第一反应就是代码写的有问题，首先找到了代码走查，再对照官方给出的开发类库API，采用的是如下的发送方法：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt; int[] submitMsgAsync(java.lang.String content, java.lang.String[] mobiles, java.lang.String serviceId)  &lt;/pre&gt;&#xA;&#xA;&lt;p&gt;这个方法显而易见，异步发送短信，参数分表是短信内容、手机号码、serviceId。&lt;br /&gt;&#xA;没有啥问题嘛，为啥发送的这么慢呢？我们采用的是一个阻塞队列，从队列里取出来后进行发送。我仔细的看了下整个过程没有发现代码可以调整的地方。于是写了一个main函数，测试了两次，一次是普通短信，执行完成约7ms，一次为长短信，拆分为2条，返回为 2003ms 。没有看错，尼玛2s，这不科学啊！&lt;br /&gt;&#xA;问题找到了，接下来改如何解决呢？&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;解决&lt;/h4&gt;&#xA;&#xA;&lt;h5&gt;方法一&lt;/h5&gt;&#xA;&#xA;&lt;p&gt;我们原来采用的方式是一次发送一个手机号码，但是这个方法是可以一次发送多个手机号码的，仔细的翻了下移动的FAQ，一次提交最多为5个手机号码，嗯，这样能提高发送的速度，但是这还是达不到20条/s。&lt;/p&gt;&#xA;&#xA;&lt;h5&gt;方法二&lt;/h5&gt;&#xA;&#xA;&lt;p&gt;在咨询移动人员后，他们对于我们的问题感到很费解，说他们后台收到请求是很快的，但是不是很清楚我们所说的一次发送需要2s的原因，在多次沟通后这个问题没有得到解决，但是他们提出了另外一个思路，申请多个子账号来发送，我们想了下如果加上1065xxxx 主号码，再申请若干1065xxxx001、1065xxxx002等多个子账号同时连接网关，这样一次提交5个手机号码，基本上能将发送速度提升到允许的速度。经过实际发送测试后发现，该方法可行，但是有几个问题：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;客户不希望收到的发送号码为子号，要求为1065XXXX的主号码，我印象中API支持指定发送的原号码的。但是再多次尝试失败并与移动支持沟通后表示采用子账号发送的短信无法指定为主号码，只能为1065xxxx001后面增加后缀。&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;该种方式在发送的过程中多次出现连接认证10001的情况，不是很稳定。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h5&gt;方法三&lt;/h5&gt;&#xA;&#xA;&lt;p&gt;在写main方法测试的时候，我发现每次只执行该方法执行时间总是为2003，我猜测应该是有意的sleep了，于是我想看看源代码证实我的想法，于是反编译了官方提供的jar，在EmppApi 这个类里发送短信方法最后一行看到了&lt;/p&gt;&#xA;&#xA;&lt;pre&gt; Thread.sleep(1000L / sendRate); &lt;/pre&gt; &#xA;&#xA;&lt;p&gt;的确是有休眠的，但是这个sendRate是哪里来的，从字面上来看，应该是一个控制速率，于是再找，发现这个类里其实提供了一个方法：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt; int[] submitMsgAsync(String content, String[] mobiles, String serviceId, String srcTermId, int sendRate)&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;sendRate 这个参数如果不设置，默认为1，这就解释了拆分为两条发送的长短信为什么会执行耗时为2s了，奇怪的是这个方法是public的，但是官方的APIdocument里并没有找到这个重载方法！好吧，也许是他们忘了，我们写代码的时候瞎了！！！！！&#xA;最后在设置完这个参数为20后搞定！&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;总结&lt;/h4&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整个过程前后折腾了差不多一个礼拜，短信业务比较特殊，不上量有些问题无法暴露出来，而且EMPP并没有模拟器可以测试收发。移动的支撑人员并不是API的开发者，有些问题没办法在代码层面协助，最终还是得靠自己来解决。&lt;/li&gt;&#xA;&lt;li&gt;代码是最好的文档！！！！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>开始记录点滴</title>
      <link>http://johnyq.github.com/2013/init.html</link>
      <pubDate>2013-08-29 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;工作这些年来零零碎碎也写了不少东西，但是时间一长都烟消云散了。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;好记性不如烂笔头的道理，颠古不破。&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;前段时间，有群里的技术朋友推荐使用github来搭建自己的blog，恰好我也一直想好好的学习下git的使用，目前从个人的情况来看，github在工作和学习中使用频率仅次于google。例如：我要学习某一个技术框架，我会先去官方下载demo或者document，但是有时候有些例子语焉不详或者过于简单，这时候去github上找一些例子就是一个捷径。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在github搭建blog对于会对于我们这些码农似乎难度并不大，前提无非有如下几点&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;有一个github的帐号。&lt;/li&gt;&#xA;&lt;li&gt;在本机上安装git客户端。&lt;/li&gt;&#xA;&lt;li&gt;使用第三方的博客引擎来生成静态HTML然后push到github上。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;p&gt;我在网上检索了下，大多数采取的方案都是jekyll，这货是基于ruby的，但是ruby我并不熟悉，只好按网上教程的先安装RailsInstall 然后gem install其他组件。&lt;br /&gt;&#xA;折腾了一晚上，勉勉强强的算是有了一个雏形，但是在安装一个解释器的时死活装不上去，具体原因和windows下的c编译器有关系，于是寻找其他的解决办法。后来找到了我比较熟悉的java实现的&lt;a href=&#34;https://github.com/jonbullock/JBake&#34;&gt;JBake&lt;/a&gt;,从代码本身来看是居于freemaker和boostrap为模版来实现的。后来&lt;a href=&#34;http://wendal.net/&#34;&gt;兽兽&lt;/a&gt;强力推荐了他自己用go语言基于ruhoh实现的&lt;a href=&#34;https://github.com/wendal/gor&#34;&gt;gor&lt;/a&gt;,我是个喜欢尝鲜的人，于是去尝试着用了下，很惊喜，相对于jekyll复杂的环境相比，gor简单很多，只要有一个go语言的编译环境即可。于是打算就使用这个来搭建自己的个人blog了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在这里感谢兽兽提供的gor，不得不说，它很好用，不懂go语言也无所谓，因为他很贴心的提供一个已经编译好的&lt;a href=&#34;https://code.google.com/p/gor/downloads/list&#34;&gt;gor.exe&lt;/a&gt;,可以直接在windows下使用。当然我个人觉得还是自己编译下最好:)。gor的详细使用方法的&lt;a href=&#34;https://github.com/wendal/gor&#34;&gt;传送门&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;</description>
    </item>
  </channel>
</rss>